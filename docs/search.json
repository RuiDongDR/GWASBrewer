[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/articles/simulating_data.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Simulating Data","text":"vignette demonstrates use sim_mv function simulate data different types GWAS data.","code":""},{"path":"/articles/simulating_data.html","id":"introduction-to-sim_mv","dir":"Articles","previous_headings":"","what":"Introduction to sim_mv","title":"Simulating Data","text":"sim_mv function generates GWAS summary statistics multiple continuous traits linear structural equation model encoded matrix direct effects. Variants can generated without LD. also helper functions LD-pruning generating special kinds direct effect matrices. sim_mv function wrapper general function sim_sumstats_lf generates summary statistics given latent factor structure set traits. Direct usage sim_sumstats_lf demonstrated briefly end vignette.","code":""},{"path":[]},{"path":"/articles/simulating_data.html","id":"input","dir":"Articles","previous_headings":"Basic Usage","what":"Input","title":"Simulating Data","text":"sim_mv function five required arguments: N: GWAS sample size trait. can scalar, vector matrix (). J: number SNPs simulate (scalar). h2: hertiability trait. can scalar vector length equal number traits generated. pi: proportion SNPs direct effect trait. can scalar vector length equal number traits generated. G: matrix specifying direct effects linear SEM. additional optional arguments: R_E: Matrix giving correlation environmental components trait (see section details). option ignored sample overlap. R_LD snp_info: Options used GWAS data LD af: Optional vector allele frequencies. option used data LD. sporadic_pleiotropy: Allow single variant direct effects multiple traits. Defaults TRUE. return_dat: developer option, return extra data useful debugging testing.","code":""},{"path":"/articles/simulating_data.html","id":"output","dir":"Articles","previous_headings":"Basic Usage","what":"Output","title":"Simulating Data","text":"sim_mv function returns list following elements beta_hat, se_beta_hat: Simulated GWAS effect estimates standard errors direct_SNP_effects_marg: direct effects SNPs traits (marginal). Direct means mediated traits. direct_SNP_effects_joint: direct effects SNPs traits (joint). Joint marginal effects LD. LD, joint effects direct causal effect SNP trait marginal effect includes LD. beta_joint beta_marg: Total associations (including mediated traits). beta_marg expected value beta_hat. R: Correlation standard errors across traits. identity sample overlap. Otherwise depends supplied environmental correlation, genetic correlation sample overlap. direct_trait_effects: Matrix direct effects traits total_trait_effects: Matrix total effects traits used general mode, order columns beta_hat, se_beta_hat, B corresponds order variables G. used xyz mode, first column \\(X\\), second column \\(Y\\) subsequent columns \\(Z_k\\)’s order provided.","code":""},{"path":"/articles/simulating_data.html","id":"specifying-the-dag","dir":"Articles","previous_headings":"","what":"Specifying the DAG","title":"Simulating Data","text":"matrix G specifies linear structural equation model set traits. G must square matrix dimension \\(K\\times K\\) \\(K\\) total number traits. , G must contain row column every trait even trait independent traits. G[,j] entry G specifies direct linear effect trait \\(\\) trait \\(j\\). diagonal entries \\(G\\) 0. error generated G specifies graph contains cycles. traits assumed variance equal 1, G[,j]^2 proportion trait \\(j\\) variance explained direct effect trait \\(\\). example, graph : represented matrix simulate data graph, can use function call , specified GWAS sample size 60k every GWAS overlap. gave different heritabilities four traits (h2 argument). Every trait expected 1000 direct effect SNPs (pi argument). Note pi specifies expected proportion direct effect SNPs expected number direct effect SNPs. J specifies total number variants generate, case 50,000.","code":"G <- matrix(c(0, sqrt(0.25), 0, sqrt(0.15),                0, 0, 0, sqrt(0.1),                sqrt(0.2), 0, 0, -sqrt(0.3),                0, 0, 0, 0), nrow = 4, byrow = TRUE) colnames(G) <- row.names(G) <- c(\"X\", \"Y\", \"Z\", \"W\") G #>           X   Y Z          W #> X 0.0000000 0.5 0  0.3872983 #> Y 0.0000000 0.0 0  0.3162278 #> Z 0.4472136 0.0 0 -0.5477226 #> W 0.0000000 0.0 0  0.0000000 sim_dat1 <- sim_mv(G = G,                   N = 60000, J = 50000,                    h2 = c(0.3, 0.3, 0.5, 0.4),                    pi = 1000/50000) #> SNP effects provided for 50000 SNPs and 4 traits."},{"path":"/articles/simulating_data.html","id":"generating-g-from-xyz-mode-","dir":"Articles","previous_headings":"Specifying the DAG","what":"Generating \\(G\\) from “XYZ” mode.","title":"Simulating Data","text":"function xyz_to_G generate matrix, \\(G\\), corresponding specific “XYZ” DAG form. “XYZ” DAG, exposure (\\(X\\)), outcome (\\(Y\\)), \\(K-2\\) variables, \\(Z_1, \\dots, Z_{K-2}\\). (possibly 0) effect \\(X\\) \\(Y\\) specified gamma argument. Variables \\(Z_1, \\dots, Z_{K-2}\\) can effects either \\(X\\), \\(Y\\) . \\(Z_k\\) confounder \\(X\\) \\(Y\\) (effects variables), child (collider) \\(X\\) \\(Y\\) (effects variables), mediator \\(X\\) \\(Y\\) (effect \\(X\\) \\(Y\\)). special cases, effects zero. \\(Z_k\\) also parent child \\(X\\) \\(Y\\). program give error user tries specify mediator \\(Y\\) \\(X\\) well non-zero effect \\(X\\) \\(Y\\) create cycle. Effects \\(Z_k\\) \\(X\\) \\(Y\\) respectively given tau_xz tau_yz arguments. direction effects given dir_xz dir_yz arguments. Effect size arguments beta, tau_xz, tau_yz given signed proportion variance explained. gamma = -0.3, direct effect \\(X\\) explains 30% variance \\(Y\\) effect \\(X\\) \\(Y\\) negative. direction parameters dri_xz dir_yz vectors 1 -1 length \\(K-2\\). specify direction effect \\(Z_k\\) \\(X\\) \\(Y\\) 1 indicating effect \\(X\\) \\(Y\\) -1 indicating effect \\(X\\) \\(Y\\). example, code generates matrix corresponding graph : weights graph give effect size. Note square root value provided tau_xz tau_yz specifies percent variance explained. example, effect \\(Z_1\\) \\(X\\) \\(0.316 = \\sqrt{0.1}\\) effect \\(Z_2\\) \\(X\\) \\(-0.387 = - \\sqrt{0.15}\\).","code":"myG <- xyz_to_G(tau_xz = c(0.1, -0.15, 0.2, 0.3),                     tau_yz = c(0, 0.2, -0.25, 0.15),                     dir_xz = c(1, 1, -1, -1),                     dir_yz = c(1, 1, -1, 1),                    gamma = 0.3)"},{"path":"/articles/simulating_data.html","id":"a-closer-look-at-the-output","dir":"Articles","previous_headings":"","what":"A Closer Look at the Output","title":"Simulating Data","text":"can now take look output. Summary statistics contained beta_hat se_beta_hat tables dimension \\(J\\times K\\). direct_trait_effects object matrix giving input G total_trait_effects gives total effect trait trait. true SNP effects also stored simulation object. direct_SNP_effects_joint beta_joint tablse give direct total SNP effects. _joint ending indicates variables store expected joint association, conditional variants. GWAS effect estimates measure marginal association, also store expected direct total marginal associations direct_SNP_effects_marg beta_marg. variants independent (LD), expected joint marginal associations . However, generated data LD, case (see LD). without LD, beta_marg always expected value beta_hat, beta_marg association measure infinite GWAS sample size. Direct SNP effects always independent across traits total SNP effects sum direct effects indirect effects mediated traits. see difference, make plots. First plot direct SNP effects \\(Z\\) vs direct SNP effects \\(W\\)  SNP effects generated point-normal distribution, SNPs non-zero one \\(Z\\) \\(W\\). However, handful variants direct effects . “sporadic pleiotropy” can prevented sporadic_pleiotropy=FALSE desired. Next plot total SNP effects \\(Z\\) vs total SNP effects \\(W\\). \\(Z\\) causal effect \\(W\\), variants effects \\(Z\\) also affect \\(W\\). line plot slope equal total effect \\(Z\\) \\(W\\). majority SNPs non-zero effect \\(Z\\) fall exactly line. sporadic_pleiotropy= FALSE, variants non-zero effect \\(Z\\) fall line. also variants zero effect \\(Z\\) non-zero effect \\(W\\). variants non-zero direct effect \\(W\\) direct effect \\(Z\\).  Finally, can verify observed GWAS effect estimate noisy measurement beta_marg (case equal beta_joint)","code":"names(sim_dat1) #>  [1] \"beta_hat\"                 \"se_beta_hat\"              #>  [3] \"direct_SNP_effects_marg\"  \"direct_SNP_effects_joint\" #>  [5] \"direct_trait_effects\"     \"total_trait_effects\"      #>  [7] \"beta_joint\"               \"beta_marg\"                #>  [9] \"trait_corr\"               \"R\"                        #> [11] \"R_E\"                      \"true_h2\" dim(sim_dat1$beta_hat) #> [1] 50000     4 head(sim_dat1$beta_hat) #>                  X             Y             Z             W #> [1,]  0.0006032969  0.0074008360  0.0012957544  2.606933e-07 #> [2,] -0.0023938074 -0.0005043024 -0.0006589290 -3.637417e-03 #> [3,]  0.0033178233  0.0025144298  0.0080631826  1.817726e-03 #> [4,]  0.0011088796  0.0060358783  0.0008868393  3.025173e-03 #> [5,] -0.0074194034 -0.0023891747 -0.0012815257 -1.537479e-03 #> [6,] -0.0023909927  0.0030201757  0.0061494625  3.285122e-04 head(sim_dat1$se_beta_hat) #>             [,1]        [,2]        [,3]        [,4] #> [1,] 0.004082483 0.004082483 0.004082483 0.004082483 #> [2,] 0.004082483 0.004082483 0.004082483 0.004082483 #> [3,] 0.004082483 0.004082483 0.004082483 0.004082483 #> [4,] 0.004082483 0.004082483 0.004082483 0.004082483 #> [5,] 0.004082483 0.004082483 0.004082483 0.004082483 #> [6,] 0.004082483 0.004082483 0.004082483 0.004082483 sim_dat1$direct_trait_effects #>           X   Y Z          W #> X 0.0000000 0.5 0  0.3872983 #> Y 0.0000000 0.0 0  0.3162278 #> Z 0.4472136 0.0 0 -0.5477226 #> W 0.0000000 0.0 0  0.0000000 sim_dat1$total_trait_effects #>           X         Y Z          W #> X 0.0000000 0.5000000 0  0.5454122 #> Y 0.0000000 0.0000000 0  0.3162278 #> Z 0.4472136 0.2236068 0 -0.3038068 #> W 0.0000000 0.0000000 0  0.0000000 plot(sim_dat1$direct_SNP_effects_joint[,3], sim_dat1$direct_SNP_effects_joint[,4],       xlab = \"Direct Z effect\", ylab = \"Direct W effect\") plot(sim_dat1$beta_joint[,3], sim_dat1$beta_joint[,4],       xlab = \"Total Z effect\", ylab = \"Total W effect\") abline(0, sim_dat1$total_trait_effects[3,4], col = \"red\", lty = 2, lwd = 2) plot(sim_dat1$beta_marg[,3], sim_dat1$beta_hat[,3],       xlab = \"beta_marg[,3] = E[beta_hat[,3]]\", ylab = \"beta_hat[,3]\") abline(0, 1, col = \"red\", lty = 2, lwd = 2)"},{"path":"/articles/simulating_data.html","id":"standardized-vs-non-standardized-effects","dir":"Articles","previous_headings":"","what":"Standardized vs Non-Standardized Effects","title":"Simulating Data","text":"default, LD, sim_mv returns standardized effects standardized effect estimates. estimates obtain genotypes scaled population variance 1 rather coded 0, 1, 2. relationship standardized non-standardized effect estimates simply \\(\\hat{\\beta}_j^{(non-std)} = \\hat{\\beta}_j^{(std)}/sd(g_j)\\) \\(j\\) indexes variants, \\(sd(g_j)\\) population standard deviation variant \\(j\\). Similarly relationship variance standardized non-standardized effect estimates \\(se\\left(\\hat{\\beta}_j^{(non-std)}\\right) = se\\left(\\hat{\\beta}_j^{(std)}\\right)/sd(g_j)\\). previously generated sim_dat1, every effect estimate standard error. standard error \\(\\hat{\\beta}_j^{(std)}\\) approximately \\(1/\\sqrt{N}\\) used common sample size across traits. Non-standardized effect estimates different standard errors also depend variant allele frequency. Generating non-standardized effects requires input allele frequencies used calculate variance SNP. can provided af argument can accept either scalar, case allele frequency used every SNP, vector length J, function takes single argument returns vector allele frequencies length determined argument. af argument provided, sim_mv return effect estimates expected associations/true effects non-standardized scale.","code":"sim_dat2 <- sim_mv(G = G,                   N = 60000, J = 50000,                    h2 = c(0.3, 0.3, 0.5, 0.4),                    pi = 1000/50000,                    af = function(n){rbeta(n, 1, 5)}) #> SNP effects provided for 50000 SNPs and 4 traits.  head(sim_dat2$se_beta_hat) #>             [,1]        [,2]        [,3]        [,4] #> [1,] 0.016947120 0.016947120 0.016947120 0.016947120 #> [2,] 0.006562878 0.006562878 0.006562878 0.006562878 #> [3,] 0.027922349 0.027922349 0.027922349 0.027922349 #> [4,] 0.008974627 0.008974627 0.008974627 0.008974627 #> [5,] 0.011949475 0.011949475 0.011949475 0.011949475 #> [6,] 0.014711105 0.014711105 0.014711105 0.014711105"},{"path":"/articles/simulating_data.html","id":"simulating-data-with-ld","dir":"Articles","previous_headings":"","what":"Simulating Data with LD","title":"Simulating Data","text":"sim_mv can used generate data LD inputting list LD matrices corresponding table SNP information. function work fastest LD matrix broken small blocks. input data format LD pattern list either ) matrices, b) sparse matrices (class dsCMatrix) c) eigen decompositions (class eigen). simGWAS package contains built data set containing LD pattern Chromosome 19 HapMap3 broken 39 blocks. LD estimated HapMap3 European subset using LDShrink. data set can also downloaded . LD pattern must accompanied data frame containing columns SNP giving SNP name (can arbitrary) AF giving allele frequency. Let’s look built-LD data LD pattern covers 19,490 SNPs. number rows variant annotation data frame must match number variants LD pattern. wish generate GWAS data larger number variants covered LD pattern, simGWAS repeat LD pattern many times necessary give desired number variants. generate data LD, LD pattern variant annotation data frame given R_LD snp_info parameters. built-LD pattern corresponds density 1.2 million variants per genome. However, interest saving time space, generate data 100k variants. means causal effects denser might realistic data. data LD, _joint objects _marg objects identical. example, can compare beta_joint beta_marg \\(Z\\).  can consider variants non-zero values beta_joint[,3] variants causal effects \\(Z\\) non-zero values beta_marg[,3] non-zero (population) marginal association \\(Z\\), meaning LD least one causal variant. plot, see many variants causal effect nevertheless non-zero marginal association, expected. causal variants don’t fall exactly red line cases, multiple causal variants LD .","code":"data(\"ld_mat_list\") data(\"snpdata\")  length(ld_mat_list) #> [1] 39  sapply(ld_mat_list, class) #>  [1] \"dsCMatrix\" \"dsCMatrix\" \"dsCMatrix\" \"dsCMatrix\" \"dsCMatrix\" \"dsCMatrix\" #>  [7] \"dsCMatrix\" \"dsCMatrix\" \"dsCMatrix\" \"dsCMatrix\" \"dsCMatrix\" \"dsCMatrix\" #> [13] \"dsCMatrix\" \"dsCMatrix\" \"dsCMatrix\" \"dsCMatrix\" \"dsCMatrix\" \"dsCMatrix\" #> [19] \"dsCMatrix\" \"dsCMatrix\" \"dsCMatrix\" \"dsCMatrix\" \"dsCMatrix\" \"dsCMatrix\" #> [25] \"dsCMatrix\" \"dsCMatrix\" \"dsCMatrix\" \"dsCMatrix\" \"dsCMatrix\" \"dsCMatrix\" #> [31] \"dsCMatrix\" \"dsCMatrix\" \"dsCMatrix\" \"dsCMatrix\" \"dsCMatrix\" \"dsCMatrix\" #> [37] \"dsCMatrix\" \"dsCMatrix\" \"dsCMatrix\" # This prints the number of SNPs in each block sapply(ld_mat_list, nrow) #>  [1] 140 519 339 435 523 280 675 325 651 548 274 483 442 744 460 177 469 173 358 #> [20] 564 392 737 596 818 307 863 276 435 204 364 480 381 757 844 753 656 483 856 #> [39] 709  sapply(ld_mat_list, nrow) %>% sum() #> [1] 19490  dim(snpdata) #> [1] 19490    14  head(snpdata) #> # A tibble: 6 × 14 #>      AF SNP   allele   chr ld_sn…¹     map    pos regio…² snp_id in_ha…³ ldsco…⁴ #>   <dbl> <chr> <chr>  <int>   <int>   <dbl>  <int>   <dbl>  <int> <lgl>     <dbl> #> 1 0.394 rs81… G,A       19  7.50e7 0       260912       1 7.50e7 TRUE       93.0 #> 2 0.455 rs81… A,T       19  7.50e7 2.68e-5 260970       1 7.50e7 TRUE       81.4 #> 3 0.394 rs81… A,G       19  7.50e7 5.59e-5 261033       1 7.50e7 TRUE       93.0 #> 4 0.939 rs23… T,C       19  7.50e7 2.37e-3 266034       1 7.50e7 TRUE       16.2 #> 5 0.399 rs10… C,T       19  7.50e7 2.83e-3 267039       1 7.50e7 TRUE       86.8 #> 6 0.343 rs12… T,C       19  7.50e7 7.09e-3 276245       1 7.50e7 TRUE       79.3 #> # … with 3 more variables: ldscore_hm3 <dbl>, keep_ld_prune_0.1 <lgl>, #> #   keep_ld_prune_0.01 <lgl>, and abbreviated variable names ¹​ld_snp_id, #> #   ²​region_id, ³​in_hapmap, ⁴​ldscore_1kg set.seed(10) sim_dat1_LD <- sim_mv(G = G,                   N = 60000, J = 1e5,                    h2 = c(0.3, 0.3, 0.5, 0.4),                    pi = 1000/1e5, R_LD = ld_mat_list,                    snp_info = snpdata) #> SNP effects provided for 100000 SNPs and 4 traits. with(sim_dat1_LD, plot(beta_joint[,3], beta_marg[,3])) abline(0, 1, lty = 2, lwd =2, col = \"red\")"},{"path":"/articles/simulating_data.html","id":"ld-pruning-ld-proxies-and-ld-matrix-extraction","dir":"Articles","previous_headings":"Simulating Data with LD","what":"LD-Pruning, LD-proxies, and LD matrix extraction","title":"Simulating Data","text":"Many post-GWAS applications Mendelian randomization polygenic risk score construction require LD-pruned set variants. simGWAS contains LD-related functions help pruning testing methods require input LD matrices. Note methods use true LD pattern rather estimated LD. sim_ld_prune function perform LD-clumping simulated data, prioritizing variants according supplied pvalue vector. Although argument called pvalue, can numeric vector used prioritize variants. pvalue argument can also accept integer. pvalue = , variants prioritized according p-value trait column . pvalue omitted, variants prioritized randomly (different result obtained re-run unless seed set). speed performance, need variants \\(p\\)-value less certain threshold, supply pvalue_thresh argument. prune based p-values trait \\(Z\\) two different equivalent ways. sim_ld_prune returns list indices corresponding LD-pruned set variants. sim_ld_proxy function return LD-proxies (variants LD given threshold) supplied set variants. extract proxies arbitrary variants. return_mat option cause function return LD matrix proxies well indices proxies Finally, sim_extract_ld function extract LD matrix set variants. can use check previous functions. First, proxies index 600 correlation greater 0.8 index 600. Next can check LD-pruned set mutual correlations greater \\(\\sqrt(0.1) \\approx 0.316\\)","code":"pruned_set1 <- sim_ld_prune(dat = sim_dat1_LD,                              pvalue = 3,                              R_LD = ld_mat_list,                              r2_thresh = 0.1,                             pval_thresh = 1e-6) #> Prioritizing variants based on p-value for trait 3 length(pruned_set1) #> [1] 404 pval3 <- with(sim_dat1_LD, 2*pnorm(-abs(beta_hat[,3]/se_beta_hat[,3]))) pruned_set2 <- sim_ld_prune(dat = sim_dat1_LD,                              pvalue = pval3,                              R_LD = ld_mat_list,                              r2_thresh = 0.1,                             pval_thresh = 1e-6) all.equal(pruned_set1, pruned_set2) #> [1] TRUE ld_proxies <- sim_ld_proxy(sim_dat1_LD, index = c(100, 400, 600), R_LD = ld_mat_list, r2_thresh = 0.64, return_mat = TRUE) ld_proxies #> [[1]] #> [[1]]$index #> [1] 100 #>  #> [[1]]$proxy_index #> [1] 98 99 #>  #> [[1]]$Rproxy #>           [,1]      [,2] #> [1,] 1.0000000 0.9798682 #> [2,] 0.9798682 1.0000000 #>  #>  #> [[2]] #> [[2]]$index #> [1] 400 #>  #> [[2]]$proxy_index #> [1] 395 396 397 398 399 401 402 #>  #> [[2]]$Rproxy #>           [,1]      [,2]      [,3]      [,4]      [,5]      [,6]      [,7] #> [1,] 1.0000000 0.9812294 0.9675572 0.9742288 0.9302869 0.8876271 0.7821419 #> [2,] 0.9812294 1.0000000 0.9841205 0.9905250 0.9454487 0.9054550 0.7934351 #> [3,] 0.9675572 0.9841205 1.0000000 0.9810106 0.9367627 0.9175545 0.8097815 #> [4,] 0.9742288 0.9905250 0.9810106 1.0000000 0.9522425 0.9119614 0.7991366 #> [5,] 0.9302869 0.9454487 0.9367627 0.9522425 1.0000000 0.8731959 0.7643812 #> [6,] 0.8876271 0.9054550 0.9175545 0.9119614 0.8731959 1.0000000 0.7522628 #> [7,] 0.7821419 0.7934351 0.8097815 0.7991366 0.7643812 0.7522628 1.0000000 #>  #>  #> [[3]] #> [[3]]$index #> [1] 600 #>  #> [[3]]$proxy_index #> [1] 601 606 #>  #> [[3]]$Rproxy #>            [,1]       [,2] #> [1,]  1.0000000 -0.7193148 #> [2,] -0.7193148  1.0000000 ld_mat1 <- sim_extract_ld(sim_dat1_LD, index = c(600, ld_proxies[[3]]$proxy_index), R_LD = ld_mat_list) ld_mat1 #>            [,1]       [,2]       [,3] #> [1,]  1.0000000 -0.8044757  0.8670863 #> [2,] -0.8044757  1.0000000 -0.7193148 #> [3,]  0.8670863 -0.7193148  1.0000000 all(ld_mat1[,1] > 0.8) #> [1] FALSE ld_mat2 <- sim_extract_ld(sim_dat1_LD, index = pruned_set1, R_LD = ld_mat_list) diag(ld_mat2) <- 0 # remove the diagonal all(ld_mat2^2 < 0.1) #> [1] TRUE"},{"path":"/articles/simulating_data.html","id":"sample-overlap","dir":"Articles","previous_headings":"","what":"Sample Overlap","title":"Simulating Data","text":"two GWAS performed different traits using overlapping samples, sampling errors effect estimates correlated. two GWAS sample sizes \\(N_1\\) \\(N_2\\) \\(N_c\\) overlapping samples, correlation \\(\\hat{z}_{1j}\\) \\(\\hat{z}_{2j}\\), \\(z\\)-scores variant \\(j\\) study 1 study 2, approximates \\(\\frac{N_c}{\\sqrt{N_1 N_2}} \\rho_{1,2}\\) \\(\\rho_{1,2}\\) trait correlation. sim_mv possible specify sample overlap studies providing N matrix rather scalar vector. N matrix N[,] sample size study \\(\\) N[,j] number overlapping samples studies \\(\\) \\(j\\). model used simGWAS, traits can decomposed genetic component environmental component. always assume environmental trait component independent genetic trait component. Correlation genetic components specified traits determined supplied DAG. also possible supply correlation environmental components traits using R_E parameter. example using 4 trait DAG using far. specify four GWAS sample size 60,000 30,000 samples overlapping pair GWAS. Note simGWAS assumes trait correlation subset samples doesn’t matter 30,000 samples studies different sets overlap different pairs. Prior , commands specified GWAS performed non-overlapping samples. simulation data object contains three matrices describe study correlation. R_E environmental correlation supplied command option, trait_corr total trait correlation, R correlation noise terms pairs GWAS obtained scaling trait_corr appropriate values. sample overlap, R_E argument sim_mv affect summary statistics influence calculation trait_corr. example, previous data generated without sample overlap specify R_E R object always identity sample overlap.","code":"set.seed(10) R_E <- matrix(0.4, nrow = 4, ncol = 4) diag(R_E) <- 1 N <- matrix(30000, nrow = 4, ncol = 4) diag(N) <- 30000 sim_dat3 <- sim_mv(G = G,                   N = N, J = 1e5, R_E = R_E,                   h2 = c(0.3, 0.3, 0.5, 0.4),                    pi = 1000/1e5) #> SNP effects provided for 100000 SNPs and 4 traits. sim_dat3$R_E #>      [,1] [,2] [,3] [,4] #> [1,]  1.0  0.4  0.4  0.4 #> [2,]  0.4  1.0  0.4  0.4 #> [3,]  0.4  0.4  1.0  0.4 #> [4,]  0.4  0.4  0.4  1.0 sim_dat3$trait_corr #>           X         Y          Z          W #> X 1.0000000 0.4300000 0.46024999 0.30037881 #> Y 0.4300000 1.0000000 0.34844659 0.35095546 #> Z 0.4602500 0.3484466 1.00000000 0.06718562 #> W 0.3003788 0.3509555 0.06718562 1.00000000 sim_dat3$R #>           X         Y          Z          W #> X 1.0000000 0.4300000 0.46024999 0.30037881 #> Y 0.4300000 1.0000000 0.34844659 0.35095546 #> Z 0.4602500 0.3484466 1.00000000 0.06718562 #> W 0.3003788 0.3509555 0.06718562 1.00000000 sim_dat1_LD$R_E #>      [,1] [,2] [,3] [,4] #> [1,]    1    0    0    0 #> [2,]    0    1    0    0 #> [3,]    0    0    1    0 #> [4,]    0    0    0    1 sim_dat1_LD$trait_corr #>            X          Y          Z           W #> X 1.00000000 0.15000000  0.2236068  0.04114918 #> Y 0.15000000 1.00000000  0.1118034  0.09172584 #> Z 0.22360680 0.11180340  1.0000000 -0.15190340 #> W 0.04114918 0.09172584 -0.1519034  1.00000000 sim_dat1_LD$R #>   X Y Z W #> X 1 0 0 0 #> Y 0 1 0 0 #> Z 0 0 1 0 #> W 0 0 0 1"},{"path":"/articles/simulating_data.html","id":"generating-data-for-multiple-gwas-with-the-same-variant-effects","dir":"Articles","previous_headings":"","what":"Generating Data for Multiple GWAS with the Same Variant Effects","title":"Simulating Data","text":"cases, may desirable generate multiple sets summary statistics set effect sizes. mimic performing multiple GWAS trait. function gen_bhat_from_b allows . function takes input matrix either standardized non-standardized joint (causal) effects b_joint_std b_joint. function also requires trait correlation matrix sample size argument. Optionally, LD arguments R_LD snp_info can supplied, allele frequency can supplied via af. users need options. , generate new GWAS data effects sim_dat1_LD. use LD pattern used originally required. example, simulate GWAS samples different ancestry supplying different LD pattern. resulting simulation data object contains effect estimates, standard errors, R, snp_info. information match original data set. compare effect estimates new study old study trait \\(X\\).  first simulation object sim_dat1 generated LD without supplying af argument, beta_joint values object represent standardized effects. generating secondary studies object, use b_joint_std argument rather b_joint call get_bhat_from_b.","code":"sim_dat2_LD <- gen_bhat_from_b(b_joint = sim_dat1_LD$beta_joint,                                 trait_corr = sim_dat1_LD$trait_corr,                                 N = 40000,                                 R_LD = ld_mat_list, snp_info = snpdata) #> SNP effects provided for 100000 SNPs and 4 traits. plot(sim_dat2_LD$beta_hat[,1], sim_dat1_LD$beta_hat[,1]) abline(0, 1, col = \"red\", lty = 2, lwd = 2)"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jean Morrison. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Morrison J (2022). simGWAS: Simulate GWAS Summary Statistics. R package version 0.2.0.0037, https://github.com/jean997/simGWAS.","code":"@Manual{,   title = {simGWAS: Simulate GWAS Summary Statistics},   author = {Jean Morrison},   year = {2022},   note = {R package version 0.2.0.0037},   url = {https://github.com/jean997/simGWAS}, }"},{"path":"/index.html","id":"simulate-realistic-gwas-summary-statistics-for-one-or-multiple-traits","dir":"","previous_headings":"","what":"Simulate Realistic GWAS Summary Statistics for One or Multiple Traits","title":"Simulate GWAS Summary Statistics","text":"simGWAS package simulates GWAS summary statistics. main function package sim_mv. detailed usage function see vignette. Briefly, simGWAS can simulate data following features. Data produced continuous traits user supplied linear causal relationships. GWAS multiple traits may overlapping samples. Data can generated without LD. One realistic LD pattern supplied built-data. Data generated simGWAS can used testing variety methods including heritability estimation, Mendelian randomization, genetic correlation estimation etc. package also includes utilities LD-pruning extracting LD matrices simulated data. package active development. features may added future include Support binary traits Ability add confounding effects Support alternative effect size distributions","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Simulate GWAS Summary Statistics","text":"Note vignette requires following packages installed automatically: DiagrammeR (use install.packages) reshape2 (use install.packages)","code":"devtools::install_github(\"jean997/simGWAS\",  build_vignettes = TRUE) browseVignettes(\"simGWAS\")"},{"path":"/reference/gen_bhat_from_b.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate beta hats from standardized direct SNP effects and LD — gen_bhat_from_b","title":"Generate beta hats from standardized direct SNP effects and LD — gen_bhat_from_b","text":"Generate beta hats standardized direct SNP effects LD","code":""},{"path":"/reference/gen_bhat_from_b.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate beta hats from standardized direct SNP effects and LD — gen_bhat_from_b","text":"","code":"gen_bhat_from_b(   b_joint_std,   b_joint,   trait_corr,   N,   R_LD = NULL,   snp_info = NULL,   af = NULL,   L_mat_joint_std = NULL,   theta_joint_std = NULL )"},{"path":"/reference/gen_bhat_from_b.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate beta hats from standardized direct SNP effects and LD — gen_bhat_from_b","text":"b_joint_std Matrix standardized joint (causal) effects (dimension variants traits) b_joint Matrix non-standardized joint (causal) effects (dimension variants traits). Supply one b_joint b_joint_std. trait_corr Matrix population trait correlation (traits traits) N Sample size, scalar, vector, matrix. See ?sim_mv details. R_LD LD pattern (optional). See ?sim_mv details. snp_info (optional, required R_LD supplied). af Allele frequencies (optional, allowed R_LD missing). See ?sim_mv details.","code":""},{"path":"/reference/gen_bhat_from_b.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate beta hats from standardized direct SNP effects and LD — gen_bhat_from_b","text":"function can used generate new GWAS results effect sizes passing beta_joint table data set simulated using `sim_mv`. original data generated af missing LD beta_joint table contains standardized effects. Otherwise contains non-standardized effects. Use appropriate argument, either b_joint_std b_joint.","code":""},{"path":"/reference/gen_bhat_from_b.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate beta hats from standardized direct SNP effects and LD — gen_bhat_from_b","text":"","code":"# Use gen_bhat_from_b to generate new GWAS results with the same effect sizes. N <- matrix(1000, nrow = 2, ncol =2) G <- matrix(0, nrow = 2, ncol = 2) R_E <- matrix(c(1, 0.8, 0.8, 1), nrow = 2, ncol = 2) # original data dat <- sim_mv(N = N, J = 20000, h2 = c(0.4, 0.3), pi = 1000/20000,                G = G, R_E = R_E) #> SNP effects provided for 20000 SNPs and 2 traits. # data for second GWAS # Since we didn't supply af or an LD pattern in the original GWAS, # we have standardized effects. dat_new <- gen_bhat_from_b(b_joint_std = dat$beta_joint, N = 40000,                            trait_corr = dat$trait_corr) #> SNP effects provided for 20000 SNPs and 2 traits."},{"path":"/reference/generate_random_F.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate random F — generate_random_F","title":"Generate random F — generate_random_F","text":"Generate random F","code":""},{"path":"/reference/generate_random_F.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate random F — generate_random_F","text":"","code":"generate_random_F(   K,   M,   g_F = function(n) {     runif(n, -1, 1) },   nz_factor,   omega,   h2_trait,   pad = FALSE )"},{"path":"/reference/generate_random_F.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate random F — generate_random_F","text":"g_F Function non-zero elements F generated nz_factor Number non-zero elements factor F generated. omega Proportion trait heritability explained factors h2_trait Trait heritability pad Add single trait factors? (See details)","code":""},{"path":"/reference/generate_random_F.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate random F — generate_random_F","text":"matrix","code":""},{"path":"/reference/generate_random_F.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate random F — generate_random_F","text":"Generate random set (least) K factors M traits. number traits affected factor given nz_factor. effect chosen random draw function g_F. rows resulting matrix corresponding non-zero elements omega zero pad  = TRUE, single-trait factors added. Finally, matrix re-scaled colSums(F_mat^2) = omega*h2_trait.","code":""},{"path":[]},{"path":"/reference/simGWAS.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"simGWAS — simGWAS","text":"Jean Morrison <jvmorr@umich.edu>","code":""},{"path":"/reference/sim_extract_ld.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract LD matrix from simulated data — sim_extract_ld","title":"Extract LD matrix from simulated data — sim_extract_ld","text":"Extract LD matrix specific variants simulated data set","code":""},{"path":"/reference/sim_extract_ld.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract LD matrix from simulated data — sim_extract_ld","text":"","code":"sim_extract_ld(dat, index, R_LD)"},{"path":"/reference/sim_extract_ld.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract LD matrix from simulated data — sim_extract_ld","text":"dat Simulation object produced `sim_mv` index vector indices snps extract LD R_LD List eigen-decompositions used original simulation","code":""},{"path":"/reference/sim_extract_ld.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract LD matrix from simulated data — sim_extract_ld","text":"LD matrix. SNP order matches original index order","code":""},{"path":"/reference/sim_extract_ld.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract LD matrix from simulated data — sim_extract_ld","text":"","code":"data(\"ld_mat_list\") data(\"snpdata\") # Two traits with no causal relationship, non-overlapping GWAS set.seed(1) G <- matrix(0, nrow = 2, ncol = 2) dat <- sim_mv(N = 10000, J = 50000, h2 = c(0.4, 0.3), pi = 1000/20000,                G = G,  R_LD = ld_mat_list, snp_info = snpdata) #> SNP effects provided for 50000 SNPs and 2 traits.  # extract ld matrix for all variants with p-value for trait 1 less than 1e-5 pvals <- 2*pnorm(-abs(dat$beta_hat/dat$se_beta_hat)) index <- which(pvals[,1] < 1e-5) ld_mat <- sim_extract_ld(dat, index, ld_mat_list) dim(ld_mat) #> [1] 541 541 length(index) #> [1] 541"},{"path":"/reference/sim_ld_proxy.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve LD proxies — sim_ld_proxy","title":"Retrieve LD proxies — sim_ld_proxy","text":"Retrieve LD proxies","code":""},{"path":"/reference/sim_ld_proxy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve LD proxies — sim_ld_proxy","text":"","code":"sim_ld_proxy(dat, index, R_LD, r2_thresh = 0.64, return_mat = FALSE)"},{"path":"/reference/sim_ld_proxy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve LD proxies — sim_ld_proxy","text":"dat Simulation object produced `sim_mv` index list indexes retrieve proxies R_LD LD pattern used generate dat r2_thresh Get proxies r^2 >= r2_thresh one index variants","code":""},{"path":"/reference/sim_ld_prune.html","id":null,"dir":"Reference","previous_headings":"","what":"LD prune simulated data — sim_ld_prune","title":"LD prune simulated data — sim_ld_prune","text":"LD prune simulated data","code":""},{"path":"/reference/sim_ld_prune.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LD prune simulated data — sim_ld_prune","text":"","code":"sim_ld_prune(dat, pvalue, R_LD, r2_thresh = 0.1, pval_thresh = 1)"},{"path":"/reference/sim_ld_prune.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LD prune simulated data — sim_ld_prune","text":"dat Data object produced sim_mv pvalue Either vector used prioritize variants integer. pvalue integer, , variants priorized p-value trait . pvalue missing, variants prioritized randomly. R_LD LD pattern used generate dat r2_thresh r^2 threshold pruning pval_thresh p-value threshold pruning (see details)","code":""},{"path":"/reference/sim_ld_prune.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"LD prune simulated data — sim_ld_prune","text":"vector indices corresponding LD-pruned variant set.","code":""},{"path":"/reference/sim_ld_prune.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"LD prune simulated data — sim_ld_prune","text":"Given results sim_mv, vector p-values, function return list variants p < pval_thresh mutually squared correlation less r2_thresh.","code":""},{"path":"/reference/sim_ld_prune.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"LD prune simulated data — sim_ld_prune","text":"","code":"data(\"ld_mat_list\") data(\"snpdata\")  # Two traits with no causal relationship, non-overlapping GWAS set.seed(1) G <- matrix(0, nrow = 2, ncol = 2) dat <- sim_mv(N = 10000, J = 50000, h2 = c(0.4, 0.3), pi = 1000/20000,                G = G,  R_LD = ld_mat_list, snp_info = snpdata) #> SNP effects provided for 50000 SNPs and 2 traits.  # prune on p-value for first trait pvals <- 2*pnorm(-abs(dat$beta_hat/dat$se_beta_hat)) prune_set_1 <- sim_ld_prune(dat, pvalue = pvals[,1], R_LD = ld_mat_list, pval_thresh = 1e-5) # Above is equivalent to prune_set_1 <- sim_ld_prune(dat, pvalue = 1, R_LD = ld_mat_list, pval_thresh = 1e-5) #> Prioritizing variants based on p-value for trait 1"},{"path":"/reference/sim_mv.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate multivariate GWAS data — sim_mv","title":"Simulate multivariate GWAS data — sim_mv","text":"Simulate multivariate GWAS data","code":""},{"path":"/reference/sim_mv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate multivariate GWAS data — sim_mv","text":"","code":"sim_mv(   N,   J,   h2,   pi,   G,   R_E = NULL,   R_LD = NULL,   snp_info = NULL,   af = NULL,   sporadic_pleiotropy = TRUE,   return_dat = FALSE )"},{"path":"/reference/sim_mv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate multivariate GWAS data — sim_mv","text":"N GWAS sample size. N can scalar, vector, matrix. N scalar, GWAS sample size overlap studies. N vector, element N specifies sample size corresponding GWAS overlap studies. N matrix, N_ii specifies sample size study N_ij specifies number samples present study study j. elements N must positive non-integer values generate error. J Number variants simulate h2 scalar vector giving heritability trait. pi scalar vector giving expected proportion direct effect SNPs trait. G Matrix direct effects. Rows correspond '' trait columns correspond '' trait, G[1,2] direct effect trait 1 trait 2. G 0 diagonal. R_E Environmental correlation traits. R_E ignored sample overlap. R_LD List eigen decompositions LD correlation matrices, may missing. snp_info R_LD provided, provide data frame columns \"SNP\" \"AF\" af Optional vector allele frequencies. option used data generated without LD. Otherwise allele frequency snp_info used instead. sporadic_pleiotropy Allow sporadic pleiotropy traits. Defaults TRUE. return_dat Useful debugging.","code":""},{"path":"/reference/sim_mv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate multivariate GWAS data — sim_mv","text":"list following elements: Simulated effect estimates standard errors contained matrices + beta_hat: Effect estimates trait + se_beta_hat Standard error effect estimates Everything else returned simulation parameters true effects + direct_SNP_effects_marg direct_SNP_effects_joint give direct effects SNPs traits. LD. LD, direct_SNP_effects_marg direct component expected marginal association. + beta_marg beta_joint give total SNP effects (direct indirect). LD. LD, beta_marg total expected marginal association. .e. beta_marg expected value beta_hat. + direct_trait_effects total_trait_effects matrices giving direct total effects traits . direct_trait_effects equal supplied G. + R gives row correlation beta_hat - beta_marg. users can ignore everything else returned.","code":""},{"path":"/reference/sim_mv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate multivariate GWAS data — sim_mv","text":"function generates GWAS summary statistics linear SEM specified matrix G. previous \"xyz\" mode now deprecated. used using function xyz mode, can generate corresponding G using xyz_to_G function (see examples). G square nxn matrix 0s diagonal. h2 pi scalars length n. variables variance 1, G[,j]^2 proportion variance trait j explained effect trait . get error specify cyclic DAG, DAG impossible, combination G h2 impossible.","code":""},{"path":"/reference/sim_mv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate multivariate GWAS data — sim_mv","text":"","code":"# Two traits with no causal relationship and some environmental correlation # specify completely overlapping GWAS N <- matrix(1000, nrow = 2, ncol =2) G <- matrix(0, nrow = 2, ncol = 2) R_E <- matrix(c(1, 0.8, 0.8, 1), nrow = 2, ncol = 2) dat <- sim_mv(N = N, J = 20000, h2 = c(0.4, 0.3), pi = 1000/20000,                G = G, R_E = R_E) #> SNP effects provided for 20000 SNPs and 2 traits. dat$R #>           [,1]      [,2] #> [1,] 1.0000000 0.5184593 #> [2,] 0.5184593 1.0000000 cor(dat$beta_hat - dat$beta_marg) #>           [,1]      [,2] #> [1,] 1.0000000 0.5201858 #> [2,] 0.5201858 1.0000000  # Use xyz_to_G to generate G from xyz specification myG <- xyz_to_G(tau_xz = c(0.2, -0.3), tau_yz = c(0.1, 0.25),         dir_xz = c(1, -1), dir_yz = c(1,1), gamma = 0) # If N is a scalar or a vector, there is no sample overlap dat <- sim_mv(N = 10000, J = 20000, h2 = rep(0.4, 4),               pi = c(500, 500, 1000, 1000)/20000,               G = myG) #> SNP effects provided for 20000 SNPs and 4 traits. plot(dat$beta_marg[,3], dat$beta_marg[,1]) abline(0, dat$total_trait_effects[3,1])"},{"path":"/reference/sim_sumstats_lf.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate summary statistics — sim_sumstats_lf","title":"Simulate summary statistics — sim_sumstats_lf","text":"Simulate summary statistics specified factor structure","code":""},{"path":"/reference/sim_sumstats_lf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate summary statistics — sim_sumstats_lf","text":"","code":"sim_sumstats_lf(   F_mat,   N,   J,   h2_trait,   omega,   h2_factor,   pi_L,   pi_theta,   R_E = NULL,   af = NULL,   R_LD = NULL,   snp_info = NULL,   sporadic_pleiotropy = TRUE )"},{"path":"/reference/sim_sumstats_lf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate summary statistics — sim_sumstats_lf","text":"F_mat factor matrix M K (M = number traits, K = number factors) N GWAS sample size. N can scalar, vector, matrix. N scalar, GWAS sample size overlap studies. N vector, element N specifies sample size corresponding GWAS overlap studies. N matrix, N_ii specifies sample size study N_ij specifies number samples present study study j. elements N must positive non-integer values generate error. J Total number SNPs generate h2_trait Heritability trait. Length M vector. omega Proportion trait heritability mediated factors. Length M vector. h2_factor Heritability factor. Length K vector. pi_L Proportion non-zero elements L_k. Length K factor pi_theta Proportion non-zero elements theta. Scalar length M vector. R_E Correlation environmental trait components mediated factors. M M pd matrix. af Allele frequency (optional). scalar, vector, function takes number n returns n values 0 1. argument ignored R_LD snp_info provided. af, R_LD, snp_info missing, SNPs assumed scaled variance 1, R_LD List eigen-decompositions LD correlation matrices, may missing. snp_info R_LD provided, provide data frame columns \"SNP\" \"AF\" sporadic_pleiotropy Allow single SNP affect multiple factors (default TRUE).","code":""},{"path":"/reference/sim_sumstats_lf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate summary statistics — sim_sumstats_lf","text":"function generate GWAS summary statistics M traits K common factors. matrix F_mat provides effects factor trait, F_mat[,j] gives effect factor j trait . rows F_mat scaled order provide desired proportion hertiability trait explained factors relative size sign elements within rows retained. Previously, F_mat provided, random factor matrix generated. current version, step must done manually, see examples. parameters, possible supply non-feasible set parameters. Usually occurs heritability factors low heritability traits high leading contradiction. function return error happens. Trait covariance: trait composed four independent components, genetic component mediated factors, environmental component mediated factors, genetic component mediated factors, environmental component mediated factors. Therefore, total trait covariance can decomposed sum four corresponding covariance matrices. matrix R_E specifies correlation last component . returned object, R gives overall trait correlation matrix multiplied overlap proportion matrix, equal correlation error terms beta_hat (see examples).","code":""},{"path":"/reference/sim_sumstats_lf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate summary statistics — sim_sumstats_lf","text":"","code":"myF <- generate_random_F(K = 3, M = 10, nz_factor = c(2, 3, 2),                         omega = rep(0.8, 10), h2_trait = rep(0.6, 10), pad = TRUE) dat <- sim_sumstats_lf(myF, N = 10000, J = 20000, h2_trait = rep(0.6, 10),                       omega = rep(0.8, 10), pi_L = 0.1, pi_theta = 0.1) #> SNP effects provided for 20000 SNPs and 10 traits.  myF <- diag(2) N <- matrix(c(10000, 8000, 8000, 10000), nrow = 2) R_E <- matrix(c(1, 0.6, 0.6, 1), nrow = 2) dat <- sim_sumstats_lf(F_mat = myF, N = N, J = 20000, h2_trait = rep(0.6, 2), omega = rep(1, 2), h2_factor = rep(1, 2),                        pi_L = 0.1, pi_theta = 0.1, R_E = R_E) #> SNP effects provided for 20000 SNPs and 2 traits. dat$R #>       [,1]  [,2] #> [1,] 1.000 0.192 #> [2,] 0.192 1.000 cor(dat$beta_hat[,1]-dat$beta_joint[,1], dat$beta_hat[,2]-dat$beta_joint[,2]) #> [1] 0.1938121"},{"path":"/reference/xyz_to_G.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate G from XYZ Specification — xyz_to_G","title":"Generate G from XYZ Specification — xyz_to_G","text":"Generate G XYZ Specification","code":""},{"path":"/reference/xyz_to_G.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate G from XYZ Specification — xyz_to_G","text":"","code":"xyz_to_G(tau_xz, tau_yz, dir_xz, dir_yz, gamma)"},{"path":"/reference/xyz_to_G.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate G from XYZ Specification — xyz_to_G","text":"dir_xz, dir_yz Effect direction Z X Y (see details) gamma Signed variance Y explained X, see details taux_xz, tau_yz Effect size Z X Y signed percent variance explained (see details)","code":""},{"path":"/reference/xyz_to_G.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate G from XYZ Specification — xyz_to_G","text":"matrix direct effects corresponding variables order (Y, X, Z_1, ..., Z_K)","code":""},{"path":"/reference/xyz_to_G.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate G from XYZ Specification — xyz_to_G","text":"function generates matrix G direct effects corresponding model variables Y, X, Z_1, ..., Z_K. causal effect X Y given gamma, specifies proportion variance Y explained X. K variables Z_1, ..., Z_K can effects X Y direct effects . Vectors dir_xz dir_yz specify direction effects +1 corresponding \"\" effects -1 corresponding \"\" effects. example, dir_xz = c(1, -1) dir_yz = c(1, 1) indicate two variables Z_1 Z_2 Z_1 common cause X Y Z_2 cause $Y$ caused X (Z_2 mediator X Y). function give error index dir_xz equal -1 dir_yz equal 1. indicate variable mediator Y X, however, effect X Y assumed, resulting graph cyclic allowed. inputs `tau_xz` `tau_yz` specify effect sizes Z_k variables X $Y$. given signed percent variance explained. used dir_xz = c(1, -1) dir_yz = c(1, 1) tau_xz = c(0.2, -0.3) tau_yz = c(0.1, 0.25), means confounder, Z_1 explains 20% variance X 10% variance Y effects positive. X explains 30% variance mediate Z_2 negative effect direction Z_2 explains 25% variance Y.","code":""},{"path":"/reference/xyz_to_G.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate G from XYZ Specification — xyz_to_G","text":"","code":"xyz_to_G(tau_xz = c(0.2, -0.3), tau_yz = c(0.1, 0.25),         dir_xz = c(1, -1), dir_yz = c(1,1), gamma = 0) #>           [,1]      [,2] [,3]       [,4] #> [1,] 0.0000000 0.0000000    0  0.0000000 #> [2,] 0.0000000 0.0000000    0 -0.5477226 #> [3,] 0.3162278 0.4472136    0  0.0000000 #> [4,] 0.5000000 0.0000000    0  0.0000000 # code below will give an error due to specification of a cyclic graph. if (FALSE) { xyz_to_G(tau_xz = c(0.2), tau_yz = c(0.1),         dir_xz = c(1), dir_yz = c(-1), gamma = 0.1) } # with gamma = 0, there is no cycle so no error xyz_to_G(tau_xz = c(0.2), tau_yz = c(0.1),         dir_xz = c(1), dir_yz = c(-1), gamma = 0) #>      [,1]      [,2]      [,3] #> [1,]    0 0.0000000 0.3162278 #> [2,]    0 0.0000000 0.0000000 #> [3,]    0 0.4472136 0.0000000"}]
